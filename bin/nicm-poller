#!/usr/bin/env python

import os
import sys
import time
import errno
import signal
import subprocess

from nicm.utils import writePidfile
from nicm.errors import ConfigurationError, UsageError
from nicm.interface import simple


try:
    if len(sys.argv) > 1:
        appname = 'poller-' + sys.argv[1]
    else:
        appname = 'poller'
    nicos = simple.start('poller', appname)
    poller = nicos.getDevice('Poller')
except (ConfigurationError, UsageError), err:
    print >>sys.stderr, 'Fatal error:', err
    sys.exit(1)

if len(sys.argv) == 1:
    # master process

    def quit_handler(signum, frame):
        for pid in processes:
            os.kill(pid, signum)
    signal.signal(signal.SIGINT, quit_handler)   # control-c
    signal.signal(signal.SIGTERM, quit_handler)  # terminate

    processes = {}
    for processname in poller.processes:
        nicos.log.info('starting %s poller' % processname)
        process = subprocess.Popen([sys.executable, sys.argv[0], processname])
        processes[process.pid] = (process, processname)

    # write the master process pidfile
    writePidfile('poller')

    # wait for all children to terminate
    for process, processname in processes.values():
        while True:
            try:
                process.wait()
            except OSError, err:
                if err.errno == errno.EINTR:
                    continue
                raise
            break
        nicos.log.info('%s poller terminated' % processname)
    nicos.log.info('all pollers terminated')
else:
    # poller child process

    def quit_handler(signum, frame):
        poller.quit()
    signal.signal(signal.SIGINT, quit_handler)   # control-c
    signal.signal(signal.SIGTERM, quit_handler)  # terminate

    poller.start(sys.argv[1])
    poller.wait()
