#!/usr/bin/env python

import sys, os
from os import path
thisfile = path.abspath(__file__)
while path.islink(thisfile):
    thisfile = path.join(path.dirname(thisfile), os.readlink(thisfile))
sys.path.insert(0, path.normpath(path.dirname(thisfile) + '/../lib'))

import ast
import sys
import select
import socket
import optparse

from nicos.cache.client import BaseCacheClient
from nicos.sessions.simple import SingleDeviceSession


class TacoLoggerServer(BaseCacheClient):
    """TACO logger server.

    This collects syslog messages via UDP port 14514 and puts them into the
    cache server under the tacolog/msg key.
    """

    def doInit(self):
        BaseCacheClient.doInit(self)
        self._syslogsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self._syslogsock.bind(('', 14514))
        self._selecttimeout = 0.1  # we don't expect to receive anything

    def _connect_action(self):
        pass

    def _handle_msg(self, *args):
        # shouldn't happen
        pass

    def _wait_data(self):
        r, _, _ = select.select([self._syslogsock], [], [], 0.1)
        while r:
            msg, addr = self._syslogsock.recvfrom(1024)
            #self.log.info('server: message: %s' % msg)
            self._queue.put('tacolog/msg=%r\r\n' % msg)
            r, _, _ = select.select([self._syslogsock], [], [], 0.1)


class TacoLoggerClient(BaseCacheClient):
    """TACO logger client.

    This receives tacolog/msg updates and displays them in a simple Qt GUI
    window.
    """

    def start(self):
        from PyQt4.QtCore import SIGNAL
        from PyQt4.QtGui import QApplication, QMainWindow, QTextBrowser, QFont
        from nicos.gui.outview import OutputView
        self._qtapp = QApplication(['qtapp'])
        self._window = QMainWindow()
        self._window.setWindowTitle('TACO error log')
        self._window.resize(800, 200)
        self._outview = OutputView(self._window)
        self._outview.setFont(QFont('monospace'))
        self._signal = SIGNAL('newtext')
        self._window.connect(self._window, self._signal, self._outview.addText)
        self._window.setCentralWidget(self._outview)
        self._window.show()
        self._worker.start()
        try:
            self._qtapp.exec_()
        except KeyboardInterrupt:
            pass
        self._stoprequest = True

    def _handle_msg(self, time, ttl, tsop, key, op, value):
        try:
            prio, message = ast.literal_eval(value).split('>', 1)
            prio = int(prio[1:]) & 7
            if prio <= 4:
                self._window.emit(self._signal, message)
        except Exception:
            self.log.warning('strange message received: %r' % value)


parser = optparse.OptionParser()
parser.add_option('-s', '--server', dest='server', action='store',
                  help='cache server:port, default to localhost',
                  default='localhost')
parser.add_option('-d', '--daemon', dest='daemon', action='store_true',
                  help='daemonize the  processes')
parser.add_option('-c', '--client', dest='client', action='store_true',
                  help='start the client interface')
opts, args = parser.parse_args()


if opts.daemon and opts.client:
    sys.exit('Error: --daemon and --client do not work together!')

if opts.client:
    SingleDeviceSession.run('tacologger-client', TacoLoggerClient,
                            {'prefix': 'tacolog/', 'server': opts.server},
                            pidfile=False)
else:
    SingleDeviceSession.run('tacologger', TacoLoggerServer,
                            {'prefix': 'tacolog/', 'server': opts.server},
                            daemon=opts.daemon)
