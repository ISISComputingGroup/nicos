#!/usr/bin/env python

import sys
#import os
#from os import path
#thisfile = path.abspath(__file__)
#while path.islink(thisfile):
#    thisfile = path.join(path.dirname(thisfile), os.readlink(thisfile))
#sys.path.insert(0, path.normpath(path.dirname(thisfile) + '/../lib'))

sys.path.insert(0, '/opt/taco/lib/python2.7/site-packages')
sys.path.insert(0, '/opt/taco/lib64/python2.7/site-packages')

import ast

def cache_dump(obj):
    res = []
    if isinstance(obj, (int, long, bool, float, str, unicode)):
        res.append(repr(obj))
    elif isinstance(obj, list):
        res.append('[')
        for item in obj:
            res.append(cache_dump(item))
            res.append(',')
        res.append(']')
    elif isinstance(obj, tuple):
        res.append('(')
        for item in obj:
            res.append(cache_dump(item))
            res.append(',')
        res.append(')')
    elif isinstance(obj, dict):
        res.append('{')
        for key, value in obj.iteritems():
            res.append(cache_dump(key))
            res.append(':')
            res.append(cache_dump(value))
            res.append(',')
        res.append('}')
    elif obj is None:
        return 'None'
    else:
        raise ValueError('unserializable object: %r' % obj)
    return ''.join(res)

cache_load = ast.literal_eval

mod, cls, dev, cmd, args = sys.argv[1:]
method = getattr(getattr(__import__(mod), cls)(dev), cmd)
try:
    sys.stdout.write(cache_dump(method(*cache_load(args))))
except Exception, err:
    sys.stderr.write(str(err))
