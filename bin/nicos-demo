#!/usr/bin/env python

import os
import sys
import atexit
import optparse
import subprocess
from os import path
from time import sleep

thisfile = path.realpath(__file__)
bin_path = path.normpath(path.dirname(thisfile))

if not os.environ.get('INSTRUMENT'):
    os.environ['INSTRUMENT'] = 'demo'

dev_null = open(os.devnull, 'wb')
background_processes = []


def echo(s):
    sys.stdout.write(s)
    sys.stdout.flush()


def spawn(script, *args, **kwds):
    wait = kwds.pop('wait', False)
    stdout = dev_null if not wait else None
    p = subprocess.Popen((sys.executable, path.join(bin_path, script)) + args,
                         stdout=stdout)
    if wait:
        try:
            p.wait()
        except KeyboardInterrupt:
            p.terminate()
    else:
        nice_name = '%s %s' % (script, ' '.join(args))
        background_processes.append((nice_name, p))


def wait():
    echo('Services started, press Enter to stop them.\n')
    try:
        raw_input()
    except (KeyboardInterrupt, EOFError):
        pass


@atexit.register
def cleanup():
    # clean up processes, even if nicos-demo is terminated early
    if background_processes:
        echo('Cleaning up...\n')
    for nice_name, proc in reversed(background_processes):
        try:
            proc.terminate()
        except OSError as e:
            # might already have terminated early
            echo('could not stop %s %s: %s\n' % (nice_name, e))
        else:
            proc.wait()
    echo('NICOS demo finished.\n')


parser = optparse.OptionParser()
parser.add_option('-E', dest='noelog', action='store_true',
                  help='disable electronic logbook')
parser.add_option('-W', dest='nowatchdog', action='store_true',
                  help='disable watchdog')
parser.add_option('-M', dest='nomonitor', action='store_true',
                  help='disable monitor')
parser.add_option('-m', dest='monitorsetup', action='store',
                  help='use given monitor setup instead of the default one')
parser.add_option('-H', dest='htmlmonitor', action='store_true',
                  help='start the web status service')
parser.add_option('-O', dest='oh', action='store',
                  help='does nothing (yet)')

parser.add_option('-D', dest='nodaemon', action='store_true',
                  help='disable daemon')
parser.add_option('-T', dest='textclient', action='store_true',
                  help='start text daemon client instead of GUI')
parser.add_option('-N', dest='noclient', action='store_true',
                  help='do not start any client')
parser.add_option('-t', dest='aioclient', action='store_true',
                  help='disable daemon and start console shell')

parser.add_option('-c', dest='guiconfig', action='store',
                  help='use given GUI config file instead of the default one')
parser.add_option('-u', dest='guiuser', action='store',
                  default='guest:guest@localhost',
                  help='use given user:password@server for the daemon login')

opts, rest_args = parser.parse_args()

echo('Starting NICOS demo system, please wait:')

spawn('nicos-cache')
echo(' cache')
sleep(2)

if not opts.nowatchdog:
    spawn('nicos-watchdog')
    echo(' watchdog')
    sleep(0.1)

if not opts.noelog:
    spawn('nicos-elog')
    echo(' elog')
    sleep(0.1)

spawn('nicos-poller')
echo(' poller')
sleep(0.1)

if not opts.nomonitor:
    monitorargs = ['-S', 'monitor-' + opts.monitorsetup] if opts.monitorsetup else []
    if opts.nodaemon:
        echo('.\n')
        spawn('nicos-monitor', *monitorargs, wait=True)
    else:
        spawn('nicos-monitor', *monitorargs)
        echo(' monitor')
        sleep(0.1)

if opts.htmlmonitor:
    monitorargs = ['-S', 'monitor-html',]
    spawn('nicos-monitor', *monitorargs)
    echo(' web-monitor')

if opts.aioclient:
    echo('\nServices started, starting console.\n')
    spawn('nicos-aio', wait=True)
elif not opts.nodaemon:
    spawn('nicos-daemon')
    echo(' daemon')
    sleep(1)
    echo('.\n')
    if not opts.noclient:
        if opts.textclient:
            spawn('nicos-client', opts.guiuser, wait=True)
        else:
            echo('Services started, starting GUI.\n')
            guiargs = ['-c', opts.guiconfig] if opts.guiconfig else []
            guiargs.extend([opts.guiuser, ''] + rest_args)
            spawn('nicos-gui', *guiargs, wait=True)
    else:
        wait()
else:
    echo('.\n')
    wait()
