#!/usr/bin/env python

import sys, os
from os import path
thisfile = path.abspath(__file__)
while path.islink(thisfile):
    thisfile = path.join(path.dirname(thisfile), os.readlink(thisfile))
sys.path.insert(0, path.normpath(path.dirname(thisfile) + '/../lib'))

import optparse
from nicos import nicos_version
from nicos.core.sessions.console import ConsoleSession

try:
    sepindex = sys.argv.index('--')
except ValueError:
    ipyargs = []
else:
    ipyargs = sys.argv[sepindex+1:]
    del sys.argv[sepindex:]

parser = optparse.OptionParser()
parser.add_option('-s', '--simulate', dest='simulate', action='store_true',
                  help='start in simulation mode')
opts, args = parser.parse_args()

import IPython

if not hasattr(IPython, 'Shell'):
    # IPython 0.11... heavy API changes there
    from IPython.frontend.terminal.embed import InteractiveShellEmbed
    def startshell(banner, argv, namespace, helpfunc):
        shell = InteractiveShellEmbed(banner1=banner, user_ns=namespace)
        namespace['help'] = helpfunc
        shell()
else:
    def startshell(banner, argv, namespace, helpfunc):
        shell = IPython.Shell.IPShellEmbed(banner=banner, argv=argv,
                                           user_ns=namespace)
        namespace['help'] = helpfunc
        shell()

class IPySession(ConsoleSession):
    def __init__(self, appname):
        ConsoleSession.__init__(self, appname)
        # IPython doesn't accept dict subclasses as namespaces
        self.namespace = dict()
        self.local_namespace = dict()

    def console(self):
        banner = ('NICOS IPython console ready (version %s).\nTry help() for a '
                  'list of commands, or help(command) for help on a command.'
                  % nicos_version)
        helpfunc = self.namespace['help']   # save our help() command
        startshell(banner, ipyargs, self.namespace, helpfunc)

IPySession.run(args[0] if args else 'startup', opts.simulate)
