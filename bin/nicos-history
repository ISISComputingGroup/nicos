#!/usr/bin/env python

import argparse
import logging
import sys

from os import path

sys.path.insert(0, path.dirname(path.dirname(path.realpath(__file__))))

from nicos.clients.gui.panels.history import StandaloneHistoryApp
from nicos.core.sessions.simple import SingleDeviceSession
from nicos.utils.loggers import ColoredConsoleHandler, NicosLogger, initLoggers

usage = '''%(prog)s [-h] [-c CACHE] [-p PREFIX] [key ... ]

When some keys are given, they are opened as plots on startup.  For example:

    %(prog)s T_ccr5,T_ccr5.setpoint

A time specification can be given with a colon:

    %(prog)s T_ccr5,T_ccr5.setpoint:24h

A separate view plot is opened for each such argument.
'''

parser = argparse.ArgumentParser(usage=usage)
parser.add_argument('-c', '--cache', dest='cache', action='store',
                    help='CACHE server:port, defaults to localhost:14869',
                    default='localhost')
parser.add_argument('-p', '--prefix', dest='prefix', action='store',
                    help='PREFIX is the key prefix; it will be added in front '
                    'of the key, defaults to \'nicos/\'', default='nicos/')
parser.add_argument('keys', nargs=argparse.REMAINDER,
                    help='')

opts = parser.parse_args()

# Set up logging for the GUI instance.
initLoggers()
log = NicosLogger('gui')
log.parent = None
log.setLevel(logging.INFO)
log.addHandler(ColoredConsoleHandler())


# set up logging for unhandled exceptions in Qt callbacks
def log_unhandled(*exc_info):
    import traceback
    traceback.print_exception(*exc_info)
    log.exception('unhandled exception in QT callback', exc_info=exc_info)
sys.excepthook = log_unhandled


SingleDeviceSession.run('history', StandaloneHistoryApp,
                        {'prefix': opts.prefix, 'cache': opts.cache,
                         'views': opts.keys},
                        pidfile=False)
