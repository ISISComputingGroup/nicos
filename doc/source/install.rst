Installing NICOS
================

Get the source code
-------------------

NICOS is maintained in a Git repository hosted at the FRM II.  You can clone
this repository using ::

  git clone git://trac.frm2.tum.de/home/repos/git/frm2/nicos/nicos-core.git

Alternatively you can get the current snapshot from

  http://trac.frm2.tum.de/cgit/cgit.cgi/nicos/nicos-core.git/snapshot/nicos-core-master.tar.bz2

For development, we use SSH access via Gerrit::

  git clone ssh://trac.frm2.tum.de:29418/frm2/nicos/nicos-core.git

Note that you have to log in once at the `FRM II Gerrit instance
<http://trac.frm2.tum.de/review/>`_ and add a public key for SSH, since only
public key authentication is enabled.

The bug tracker and project wiki are at

  https://trac.frm2.tum.de/projects/nicos/


.. _requirements:

Requirements
------------

* At least Python 2.6

* numpy

* pyzmq version >= 2

* Optional for the basic system:

  - the TACO Python libraries
  - scipy (for fitting and data analysis)
  - MySQLdb (for proposal DB query)
  - matplotlib (for resolution plots)
  - pyserial (for TACO-less serial line communication)
  - gnuplot (for plots in the electronig logbook)
  - Grace (for scanplot)
  - lxml (for U-Bahn service)

* For the client-server GUI and status monitor:

  - PyQt4
  - numpy
  - PyQwt (optional, for plots)
  - scipy (optional, for fitting)
  - cfitsio (optional, for detector live view)

* Under Windows:

  - pyreadline (optional, for the console to work)
  - colorama (optional, for colored console output)

* To run the test suite:

  - nose
  - coverage (optional)


Configure and build in-place for experimenting
----------------------------------------------

For development and testing purposes, NICOS components can be run directly from
the source directory.  For this, you have to build the C modules once using
``make inplace``::

  cd nicos-core
  make inplace

Now you can start the individual :ref:`components <components>`.  A setup that
uses all the major components can be started using ::

  bin/nicos-demo

This starts the cache, poller, electronic logbook, and daemon services, and also
starts the graphical interface and a status monitor.

The console will load the demo setups from ``custom/demo/setups``.  The startup
setup contains a few devices that show basic usage of the NICOS system.  Call
``help()`` to get a list of commands.  You can also call ``help(dev)`` to get
help for an individual device.

.. You can continue with :ref:`the first steps <firststeps>` from here.


Configure and build the distribution at an instrument
-----------------------------------------------------

For specific instruments, we will set up a set of setups and customizations for
that instrument.  When this is done, the installation process looks like this::

  cd nicos-core
  make
  [sudo] make install INSTRUMENT=<instrument name>

The customization is located in a subdirectory of ``custom/``.  It contains a
file called ``make.conf`` that tells the "make install" routine where to install
the libraries, and a few basic settings to make in ``nicos.conf`` (see
:ref:`nicosconf`).

The configuration will be installed as ``/opt/nicos/setups`` by default, but
that is also configurable for each instrument.


.. _nicosconf:

The ``nicos.conf`` configuration file
-------------------------------------

At startup, all NICOS processes read a file called ``nicos.conf``; it should be
located in the "root" directory of the NICOS installation, i.e. the directory
containing the ``lib`` directory.

The file ``nicos.conf`` is an INI-style configuration file.  It contains only
the most basic configuration for the whole NICOS system; all further
configuration is done in setup files, see :ref:`setups`.  For existing
customizations, the file will automatically be generated by the Makefile.

The possible entries are:

* Under the section ``[nicos]``:

  * ``setups_path`` -- path to the setup files; by default, the setups in
    ``custom/demo/setups`` will be used
  * ``user`` -- system user to use when becoming a daemon
  * ``group`` -- system group to use when becoming a daemon
  * ``logging_path`` -- the root path for all NICOS related log files, by
    default the ``log/`` directory in the installation root will be used

* Under the section ``[services]``:

  * ``services`` -- a comma-separated list of NICOS daemons to start and stop
    with the provided :ref:`init script <initscript>`. If ``none`` is specified,
    no services will be started. This is useful as a fallback and for getting
    nicos up and running.

  * ``<hostname>_services`` -- a comma-separated list of NICOS daemons to start
    and stop with the provided :ref:`init script <initscript>` running on host
    <hostname> (short name as output by `hostname -s`). If the script is executed
    on a host for which there is no such entry, the entry ``services`` is used as
    a fallback.

* Under the section ``[environment]``:

  Any key will be taken as the name of an environment variable and set in the
  NICOS process' environment.  For example, this is useful to set ``NETHOST``
  for TACO, or ``PYTHONPATH`` to find additional Python modules.
