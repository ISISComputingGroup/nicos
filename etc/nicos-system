#!/usr/bin/env python
# *****************************************************************************
# NICOS, the Networked Instrument Control System of the FRM-II
# Copyright (c) 2009-2012 by the NICOS contributors (see AUTHORS)
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Module authors:
#   Georg Brandl <georg.brandl@frm2.tum.de>
#
# *****************************************************************************

import os
import sys
import time
import signal
import ConfigParser
from os import path

thisfile = path.abspath(__file__)
while path.islink(thisfile):
    thisfile = path.join(path.dirname(thisfile), os.readlink(thisfile))
root_path = path.normpath(path.join(path.dirname(thisfile), '..'))

class NicosConfigParser(ConfigParser.SafeConfigParser):
    def optionxform(self, key):
        return key

def read_config():
    cfg = NicosConfigParser()
    cfg.read(path.join(root_path, 'nicos.conf'))
    if cfg.has_section('environment'):
        for name in cfg.options('environment'):
            value = cfg.get('environment', name)
            os.environ[name] = value
    if cfg.has_option('services', 'services'):
        services = cfg.get('services', 'services')
    else:
        services = 'cache,poller'
    return [svc.strip() for svc in services.split(',')]

SERVICES = read_config()

def usage():
    print >>sys.stderr, \
          'Usage: %s start|stop|restart|status [service ...]' % sys.argv[0]
    print >>sys.stderr, \
          'Possible services are %s' % ', '.join(SERVICES)
    sys.exit(1)

try:
    action = sys.argv[1]
except IndexError:
    usage()

daemons = sys.argv[2:] or SERVICES
for daemon in daemons:
    if daemon not in SERVICES:
        usage()

def read_pidfile(name, wait=0):
    begin = time.time()
    pidpath = path.join(root_path, 'pid', '%s.pid' % name)
    while True:
        try:
            pid = file(pidpath, 'rb').read()
        except:
            if time.time() > begin + wait:
                return
        else:
            break
        time.sleep(0.1)
    # check that pid really exists
    pid = int(pid)
    try:
        params = open('/proc/%d/cmdline' % pid, 'r').read().split('\0')
        if '-' in name:
            procname, instname = name.split('-')
            if not params[1].endswith(procname) and instname in params[2:]:
                raise ValueError
        elif not params[1].endswith(name):   # not our process?
            raise ValueError
        return pid
    except Exception:
        try:
            os.unlink(pidpath)
        except Exception:
            pass
        return

def start_daemon(name):
    print 'Starting %s...' % name,
    sys.stdout.flush()
    previous_pid = read_pidfile(name)
    if previous_pid:
        print 'already running? (pid = %d)' % previous_pid
        return
    try:
        procname, instname = name.split('-')
    except:
        procname, instname = name, ''
    executable = path.join(root_path, 'bin', 'nicos-%s' % procname)
    os.system('%s %s -d' % (executable, instname))
    pid = read_pidfile(name, wait=20)
    if not pid:
        print 'failed'
        sys.exit(1)
    print 'pid =', pid

def kill_daemon(name):
    print 'Killing %s...' % name,
    sys.stdout.flush()
    pid = read_pidfile(name)
    if not pid:
        print 'not running?'
    else:
        print 'pid =', pid
        os.kill(pid, signal.SIGTERM)

if action == 'start':
    for name in daemons:
        start_daemon(name)

elif action == 'stop':
    for name in reversed(daemons):
        kill_daemon(name)

elif action == 'restart':
    dmns = ' '.join(daemons)
    os.system('%s stop %s && sleep 1 && %s start %s' % (
        sys.argv[0], dmns, sys.argv[0], dmns))

elif action == 'status':
    exitstatus = 0
    for name in daemons:
        pid = read_pidfile(name)
        if pid:
            print '%-10s: running (pid = %s)' % (name, pid)
        else:
            print '%-10s: dead' % name
            exitstatus = 1
    sys.exit(exitstatus)

else:
    print >>sys.stderr, 'Usage: %s start|stop|restart|status' % sys.argv[0]
    sys.exit(2)
