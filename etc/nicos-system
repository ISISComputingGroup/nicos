#!/usr/bin/env python

import os
import sys
import time
import signal
import ConfigParser
from os import path

DAEMONS = ['cache', 'poller', 'daemon']

try:
    action = sys.argv[1]
except IndexError:
    print >>sys.stderr, 'Usage: %s start|stop|restart|status' % sys.argv[0]
    sys.exit(1)

class NicosConfigParser(ConfigParser.SafeConfigParser):
    def optionxform(self, key):
        return key

def read_config():
    cfg = NicosConfigParser()
    cfg.read('/etc/nicos.conf')
    if cfg.has_section('environment'):
        for name in cfg.options('environment'):
            value = cfg.get('environment', name)
            os.environ[name] = value
    bin_path = ''
    control_path = '/var'
    if cfg.has_option('nicos', 'bin_path'):
        bin_path = cfg.get('nicos', 'bin_path')
    if cfg.has_option('nicos', 'control_path'):
        control_path = cfg.get('nicos', 'control_path')
    return bin_path, control_path

bin_path, control_path = read_config()

def read_pidfile(name, wait=0):
    begin = time.time()
    pidpath = path.join(control_path, 'run', '%s.pid' % name)
    while True:
        try:
            pid = file(pidpath, 'rb').read()
        except:
            if time.time() > begin + wait:
                return
        else:
            break
        time.sleep(0.1)
    # check that pid really exists
    pid = int(pid)
    try:
        params = open('/proc/%d/cmdline' % pid, 'r').read().split('\0')
        if not params[1].endswith(name):   # not our process?
            raise ValueError
        return pid
    except Exception:
        try:
            os.unlink(pidpath)
        except Exception:
            pass
        return

def start_daemon(name):
    print 'Starting %s...' % name,
    sys.stdout.flush()
    previous_pid = read_pidfile(name)
    if previous_pid:
        print 'already running? (pid = %d)' % previous_pid
        return
    os.system('%s -d' % path.join(bin_path, 'nicos-%s' % name))
    pid = read_pidfile(name, wait=20)
    if not pid:
        print 'failed'
        sys.exit(1)
    print 'pid =', pid

def kill_daemon(name):
    print 'Killing %s...' % name,
    sys.stdout.flush()
    pid = read_pidfile(name)
    if not pid:
        print 'not running?'
    else:
        print 'pid =', pid
        os.kill(pid, signal.SIGTERM)

if action == 'start':
    for name in DAEMONS:
        start_daemon(name)

elif action == 'stop':
    for name in reversed(DAEMONS):
        kill_daemon(name)

elif action == 'restart':
    os.system('%s stop && sleep 1 && %s start' % (sys.argv[0], sys.argv[0]))

elif action == 'status':
    for name in DAEMONS:
        pid = read_pidfile(name)
        if pid:
            print '%-10s: running (pid = %s)' % (name, pid)
        else:
            print '%-10s: dead' % name

else:
    print >>sys.stderr, 'Usage: %s start|stop|restart|status' % sys.argv[0]
    sys.exit(1)
