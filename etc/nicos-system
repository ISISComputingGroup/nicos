#!/usr/bin/env python
### BEGIN INIT INFO
# Provides: nicos-system
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Network Integrated Control System init script
### END INIT INFO
# *****************************************************************************
# NICOS, the Networked Instrument Control System of the FRM-II
# Copyright (c) 2009-2015 by the NICOS contributors (see AUTHORS)
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Module authors:
#   Georg Brandl <georg.brandl@frm2.tum.de>
#   Christian Felder <c.felder@fz-juelich.de>
#
# *****************************************************************************

import os
import sys
import time
import errno
import socket
import signal
from os import path

_DEFAULT = path.join(os.sep, 'etc', 'default', 'nicos-system')
nicos_root = path.dirname(path.dirname(path.realpath(__file__)))

try:
    import nicos
except ImportError:
    sys.path.insert(0, nicos_root)

if path.isfile(_DEFAULT) and 'INSTRUMENT' not in os.environ:
    try:
        with open(_DEFAULT, 'r') as fd:
            for line in fd:
                if not line.startswith('#'):
                    (key, sep, value) = line.partition('=')
                    if sep:
                        key = key.replace('export', '').strip()
                        os.environ[key] = value.rstrip()
    except IOError as e:
        print >>sys.stderr, '  ERROR: %s' % e
        print >>sys.stderr, 'WARNING: Ignoring defaults in %s.' % _DEFAULT

# We need to read the nicos.conf file, so let nicos do that.
from nicos import config


def get_config():
    hostname = ''
    try:
        hostname = socket.getfqdn().split('.')[0]
    except socket.error as e:
        print >>sys.stderr, \
            'Could not figure out host name (%s).' % str(e)
        print >>sys.stderr, \
            'Continue with nonspecific services.'
    host_spec_services = 'services_%s' % hostname

    if hostname and hasattr(config, host_spec_services):
        services = getattr(config, host_spec_services)
    else:
        services = config.services
    log_path = path.join(nicos_root, config.logging_path)
    pid_path = path.join(nicos_root, config.pid_path)
    if services.lower().strip() in ['', 'none']:
        services = []
    else:
        services = [svc.strip() for svc in services.split(',')]
    return services, log_path, pid_path

SERVICES, LOG_PATH, PID_PATH = get_config()


def usage(prog):
    print >>sys.stderr, \
        'Usage: %s start|stop|restart|status [service ...]' % prog
    print >>sys.stderr, \
        'Possible services are %s' % ', '.join(SERVICES)
    return 1


def read_pidfile(name, wait=0):
    begin = time.time()
    pidpath = path.join(PID_PATH, '%s.pid' % name)
    while True:
        try:
            pid = file(pidpath, 'rb').read()
            pid = int(pid)
        except:
            if time.time() > begin + wait:
                return
        else:
            break
        time.sleep(0.1)
    # check that pid really exists
    try:
        params = open('/proc/%d/cmdline' % pid, 'r').read().split('\0')
        if '-' in name:
            procname, instname = name.split('-')
            if not params[1].endswith(procname) and instname in params[2:]:
                raise ValueError
        elif not params[1].endswith(name):   # not our process?
            raise ValueError
        return pid
    except Exception:
        try:
            os.unlink(pidpath)
        except Exception:
            pass
        return


def start_daemon(name):
    print 'Starting %s...' % name,
    sys.stdout.flush()
    previous_pid = read_pidfile(name)
    if previous_pid:
        print 'already running? (pid = %d)' % previous_pid
        return
    try:
        procname, instname = name.split('-')
    except:
        procname, instname = name, None
    executable = path.join(nicos_root, 'bin', 'nicos-%s' % procname)
    os.system('%s%s -d' % (executable, ' -S %s' % (name,) if instname
                           else '', ))
    pid = read_pidfile(name, wait=10)
    if not pid:
        print 'failed, please look in the logfile at %s' % \
            path.join(LOG_PATH, name, name + time.strftime('-%Y-%m-%d.log'))
        return False
    print 'pid =', pid
    if name == 'cache':
        time.sleep(3)
    return True


def kill_daemon(name):
    print 'Killing %s...' % name,
    sys.stdout.flush()
    pid = read_pidfile(name)
    if not pid:
        print 'not running?'
        return True
    print 'pid =', pid,
    sys.stdout.flush()
    os.kill(pid, signal.SIGTERM)
    time.sleep(0.1)
    begin = time.time()
    while 1:
        pid = read_pidfile(name)
        if not pid:
            print
            return True
        time.sleep(0.1)
        current = time.time()
        if current > begin + 10:
            print 'FAILED to stop!'
            return False
        elif current > begin + 6:
            print 'KILL',
            try:
                os.kill(pid, signal.SIGKILL)
            except OSError as err:
                # ESRCH means: already terminated
                if err.errno != errno.ESRCH:
                    print 'FAILED to kill:', err
                    return False
        elif current > begin + 1:
            time.sleep(0.2)
        print '.',
        sys.stdout.flush()


def main(args):
    try:
        action = args[1]
        if action not in ('start', 'stop', 'restart', 'status'):
            raise IndexError
    except IndexError:
        return usage(args[0])

    all_option = False
    explicit_daemons = False

    daemon_args = args[2:]
    if '-a' in daemon_args:
        all_option = True
        daemon_args.remove('-a')
    if daemon_args:
        explicit_daemons = True
        daemons = daemon_args
        for daemon in daemons:
            if daemon not in SERVICES:
                return usage(args[0])
    else:
        daemons = SERVICES

    exitstatus = 0

    if action == 'start':
        for name in daemons:
            if not start_daemon(name):
                exitstatus = 1

    elif action == 'stop':
        if not all_option and not explicit_daemons and 'cache' in daemons:
            print 'Not stopping cache, use -a option to force'
            daemons.remove('cache')
        for name in reversed(daemons):
            if not kill_daemon(name):
                exitstatus = 1

    elif action == 'restart':
        if not all_option and not explicit_daemons and 'cache' in daemons:
            print 'Not restarting cache, use -a option to force'
            daemons.remove('cache')
        dmns = ' '.join(daemons)
        os.system('%s stop %s && sleep 1 && %s start %s' % (
            args[0], dmns, args[0], dmns))

    elif action == 'status':
        for name in daemons:
            try:
                pid = read_pidfile(name)
            except Exception as e:
                print '%-12s: could not read pidfile: %s' % (name, e)
            if pid:
                print '%-12s: running (pid = %s)' % (name, pid)
            else:
                print '%-12s: dead' % name
                exitstatus = 1

    return exitstatus

try:
    exitstatus = main(sys.argv)
except BaseException as e:
    print >>sys.stderr, 'ERROR:', e.__class__.__name__, '-', e
else:
    sys.exit(exitstatus)
