#  -*- coding: utf-8 -*-

description = 'TEST setup for new version of Monochanger on PANDA (now with PLC)'

includes = ['system']

group = 'lowlevel' # hide it for people not knowing what they are doing....

# below devices and setting need to keep in sync with the PLC-code!
devices = dict(
    # single point of failure
    #~ modbus         = device('panda.monochanger.ModBus',
                            #~ description = 'Single connecting point to the new mono changer',
                            #~ host = 'wechsler.panda.frm2',
                           #~ ),
    modbus         = device('panda.monochanger.Beckhoff',
                            description = 'Single connecting point to the new mono changer',
                            tacodevice = '//pandasrv.panda.frm2/panda/modbus/wechsler',
                            baseaddr = 0x4000,
                            cache_baseaddr = 0x4020,
                            cache_numregs = (154-64)/2,
                            cache_refresh = 0.1,
                           ),
    # sensing inputs...
    lift_sw        = device('panda.monochanger.FullDiscreteInput',
                            description = 'Lift Position as sensed by the positional switches',
                            bus = 'modbus',
                            addr = 68/2,
                           ),
    magazine_sw    = device('panda.monochanger.FullDiscreteInput',
                            description = 'Magazin Position as sensed by the positional switches',
                            bus = 'modbus',
                            addr = 72/2,
                           ),
    liftclamp_sw   = device('panda.monochanger.FullDiscreteInput',
                            description = 'Lift-clamp position as sensed by the positional switches',
                            bus = 'modbus',
                            addr = 76/2,
                           ),
    magazineclamp_sw   = device('panda.monochanger.FullDiscreteInput',
                                description = 'Magazin-clamp position as sensed by the positional switches',
                                bus = 'modbus',
                                addr = 80/2,
                               ),
    occupied_sw    = device('panda.monochanger.FullDiscreteInput',
                            description = 'Occupancy switches of the magazin',
                            bus = 'modbus',
                            addr = 84/2,
                           ),
    free_full      = device('panda.monochanger.FullDiscreteInput',
                            description = 'Which magazin slot is free/used',
                            bus = 'modbus',
                            addr = 88/2,
                           ),
    analog1        = device('panda.monochanger.FullDiscreteInput',
                            description = '16-Bit A/D value 1 (sense)',
                            bus = 'modbus',
                            addr = 92/2,
                           ),
    analog2        = device('panda.monochanger.FullDiscreteInput',
                            description = '16-Bit A/D value 2 (ref)',
                            bus = 'modbus',
                            addr = 96/2,
                           ),
    spare_inputs   = device('panda.monochanger.FullDiscreteInput',
                            description = 'Spare inputs as bit-patterns',
                            bus = 'modbus',
                            addr = 100/2,
                           ),
    # now the output devices...
    # output devices will only do anything if enable_word is set to the right code word....
    #
    lift_m         = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Lift of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 104/2,
                           ),
    magazine_m     = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Magazin of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 110/2,
                           ),
    liftclamp_m    = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Liftclamp of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 116/2,
                           ),
    magazineclamp_m = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Magazinclamp of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 122/2,
                           ),
    tableclamp_m   = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Tableclamp of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 128/2,
                           ),
    inhibit_relay_m = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Inhibit_relay of Monochanger (MOVEABLE!!!)',
                            bus = 'modbus',
                            addr = 134/2,
                           ),
    # spare outputs work always
    spare_outputs  = device('panda.monochanger.FullDiscreteOutput',
                            description = 'Spare Outputs as bit-patterns',
                            bus = 'modbus',
                            addr = 140/2,
                           ),
    # extra stuff
    liftpos_analog = device('panda.monochanger.SimpleAnalogInput',
                            description = 'Lift position as sensed by the A/D-converters',
                            bus = 'modbus',
                            addr = 146/2,
                           ),
    enable_word    = device('panda.monochanger.JustAWord',
                            description = 'enable code word',
                            bus = 'modbus',
                            addr = 150/2,
                            fmtstr='0x%04x',
                           ),
    cycle_counter  = device('panda.monochanger.SimpleDiscreteInput',
                            description = 'Cycle counter of the PLC',
                            bus = 'modbus',
                            addr = 152/2,
                            fmtstr='0x%04x',
                           ),
    # translate binary values to human readable
    lift           = device('devices.generic.Switcher',
                            description = 'Lift of Monochanger (MOVEABLE!!!)',
                            moveable = 'lift_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 0,
                            # translate PLC internal values to meaningful ones
                            mapping = {1:2, 2:4, 3:6, 4:8},
                           ),
    magazine       = device('devices.generic.Switcher',
                            description = 'Magazin of Monochanger (MOVEABLE!!!)',
                            moveable = 'magazine_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 'unknown',
                            mapping = {'101':2, '110':4, '011':6, '111':8},
                           ),
    liftclamp      = device('devices.generic.Switcher',
                            description = 'Liftclamp of Monochanger (MOVEABLE!!!)',
                            moveable = 'liftclamp_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 'unknown',
                            mapping = dict(open=1,close=0),
                           ),
    magazineclamp  = device('devices.generic.Switcher',
                            description = 'Magazinclamp of Monochanger (MOVEABLE!!!)',
                            moveable = 'magazineclamp_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 'unknown',
                            mapping = dict(open=1,close=0),
                           ),
    tableclamp     = device('devices.generic.Switcher',
                            description = 'Tableclamp of Monochanger (MOVEABLE!!!)',
                            moveable = 'tableclamp_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 'unknown',
                            mapping = dict(open=1,close=0),
                           ),
    inhibit_relay  = device('devices.generic.Switcher',
                            description = 'Inhibit_relay of Monochanger (MOVEABLE!!!)',
                            moveable = 'inhibit_relay_m',
                            precision = 0.1,
                            blockingmove = False,
                            fallback = 'unknown',
                            mapping = dict(on=1,off=0), #??
                           ),
    changer        = device('panda.monochanger.Changer',
                            description = "PANDA's monochromator changer",
                            lift = 'lift',
                            magazine = 'magazine',
                            liftclamp = 'liftclamp',
                            magazineclamp = 'magazineclamp',
                            tableclamp = 'tableclamp',
                            inhibitrelay = 'inhibit_relay',
                            enable = 'enable_word',
                            magazineocc = 'magazineocc',
                            exchangepos = dict(mth=88.67, s7motor=-36.11, mgx=0, mtx= -6, mty=5),
                            requires = dict(level='admin')
                           ),
)

startupcode = """
"""
