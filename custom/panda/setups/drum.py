#  -*- coding: utf-8 -*-

description = 'TEST setup for new version of Drum rotator on PANDA (now with PLC)'

includes = ['system']

group = 'lowlevel' # hide it for people not knowing what they are doing....

# below devices and setting need to keep in sync with the PLC-code!
devices = dict(
    # single point of failure
    #~ modbus2         = device('panda.monochanger.ModBusThingy',
                             #~ description = 'Single connecting point to the drum rotator',
                             #~ host = 'drum.panda.frm2',
                            #~ ),
    modbusdrum  = device('panda.monochanger.Beckhoff',
                         description = 'Single connecting point to the drum rotator',
                         tacodevice = '//pandasrv.panda.frm2/panda/modbus/drum',
                         baseaddr = 0x4000,
                         cache_baseaddr = 0x4020,
                         cache_numregs = (154-64)/2,
                         cache_refresh = 0.1,
                        ),
    # sensing inputs...
    dc_sw        = device('panda.monochanger.FullDiscreteInput',
                          description = 'DC Motor positional switches',
                          bus = 'modbusdrum',
                          addr = 64/2,
                         ),
    step_sw    = device('panda.monochanger.FullDiscreteInput',
                        description = 'STEP Motor positional switches',
                        bus = 'modbusdrum',
                        addr = 68/2,
                       ),
    block_sw   = device('panda.monochanger.FullDiscreteInput',
                        description = 'Block position switches',
                        bus = 'modbusdrum',
                        addr = 72/2,
                       ),
    emergency_sw   = device('panda.monochanger.FullDiscreteInput',
                            description = 'Emergency switches',
                            bus = 'modbusdrum',
                            addr = 76/2,
                           ),
    handles_sw    = device('panda.monochanger.FullDiscreteInput',
                           description = 'State of handles',
                           bus = 'modbusdrum',
                           addr = 80/2,
                          ),
    inhibit_sw      = device('panda.monochanger.FullDiscreteInput',
                             description = 'State of external inhibits',
                             bus = 'modbusdrum',
                             addr = 84/2,
                            ),
    spare_inputs2   = device('panda.monochanger.FullDiscreteInput',
                             description = 'Spare inputs as bit-patterns',
                             bus = 'modbusdrum',
                             addr = 88/2,
                            ),
    # now the output devices...
    # output devices will only do anything if enable_word is set to the right code word....
    #
    handle_cw       = device('panda.monochanger.FullDiscreteOutput',
                             description = 'Handle CW of the blocks',
                             bus = 'modbusdrum',
                             addr = 0x4032,
                            ),
    #~ magazine       = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Magazin of Monochanger (MOVEABLE!!!)',
                            #~ bus = 'modbus',
                            #~ addr = 0x4035,
                           #~ ),
    #~ liftclamp      = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Liftclamp of Monochanger (MOVEABLE!!!)',
                            #~ bus = 'modbus',
                            #~ addr = 0x4038,
                           #~ ),
    #~ magazineclamp  = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Magazinclamp of Monochanger (MOVEABLE!!!)',
                            #~ bus = 'modbus',
                            #~ addr = 0x403b,
                           #~ ),
    #~ tableclamp     = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Tableclamp of Monochanger (MOVEABLE!!!)',
                            #~ bus = 'modbus',
                            #~ addr = 0x403e,
                           #~ ),
    #~ inhibit_relay  = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Inhibit_relay of Monochanger (MOVEABLE!!!)',
                            #~ bus = 'modbus',
                            #~ addr = 0x4041,
                           #~ ),
    #~ # spare outputs work always
    #~ spare_Outputs  = device('panda.monochanger.FullDiscreteOutput',
                            #~ description = 'Spare Outputs as bit-patterns',
                            #~ bus = 'modbus',
                            #~ addr = 0x4044,
                           #~ ),
    # extra stuff
    enable_word2    = device('panda.monochanger.JustAWord',
                             description = 'enable code word',
                             bus = 'modbusdrum',
                             addr = 146/2,
                             fmtstr='0x%04x',
                            ),
    cycle_counter2  = device('panda.monochanger.SimpleDiscreteInput',
                             description = 'Cycle counter of the PLC',
                             bus = 'modbusdrum',
                             addr = 148/2,
                             fmtstr='0x%04x',
                            ),
)

startupcode = """
"""
