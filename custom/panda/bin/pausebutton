#!/usr/bin/env python

import sys, os
from os import path
thisfile = path.abspath(__file__)
while path.islink(thisfile):
    thisfile = path.join(path.dirname(thisfile), os.readlink(thisfile))
sys.path.insert(0, path.normpath(path.dirname(thisfile) + '/../lib'))
sys.path.insert(0, path.normpath(path.dirname(thisfile) + '/../../../lib'))

import optparse
from time import asctime, sleep

import fltk

from nicos import session
from nicos.cache.utils import OP_SUBSCRIBE
from nicos.cache.client import BaseCacheClient
from nicos.sessions.simple import SingleDeviceSession


class PauseButton(BaseCacheClient):

    def doInit(self):
        BaseCacheClient.doInit(self)
        session.loadSetup('detector')
        session.setMode('maintenance')
        self._device = session.getDevice('det')
        self._selecttimeout = 0.1

        # pos x,y, width, height
        self._window = fltk.Fl_Window(1280-240, 1024-200-64, 240, 200)
        self._window.label('pause button')
        self._button = fltk.Fl_Button(10, 10, 220, 180,
                                      "pause Det\nwhile counting")
        #~ self._button.type(fltk.FL_TOGGLE_BUTTON)
        self._button.labelsize(36)
        self._button.align(fltk.FL_ALIGN_CENTER|fltk.FL_ALIGN_WRAP)
        self._button.labelcolor(fltk.FL_BLACK)
        self._button.labelfont(fltk.FL_HELVETICA_BOLD)
        self._button.color2(fltk.fl_rgb_color(80,235,80))
        self._button.color(fltk.fl_rgb_color(235,235,80))
        self._button.label('pause Det\nwhile counting')
        self._button.callback(self.pauseCB)
        self._window.end()

    def _connect_action(self):
        # send request for all updates...
        self._socket.sendall('@%s/%s\r\n' % (self._prefix, OP_SUBSCRIBE))

    def _handle_msg(self, time, ttlop, ttl, tsop, key, op, value):
        if key == 'pause/pause':
            self.makebuttonresume()
        elif key == 'pause/resume':
            self.makebuttonpause()

    def start(self):
        self._worker.start()
        self._window.show()
        while self._window.visible():
            fltk.Fl.check()
            sleep(0.1)
        self._stoprequest = True

    def makebuttonresume(self):
        self._button.color(fltk.fl_rgb_color(80,235,80))
        self._button.label('resume Det\n+\nresume counting')
        self._window.redraw()
        self._button.callback(self.resumeCB)

    def makebuttonpause(self):
        self._button.color(fltk.fl_rgb_color(235,235,80))
        self._button.label('pause Det\nwhile counting')
        self._window.redraw()
        self._button.callback(self.pauseCB)

    def pauseCB(self,widget):
        self._queue.put('pause/pause=%r\r\n' % asctime())
        self.makebuttonresume()
        self._device.pause()

    def resumeCB(self,widget):
        self._queue.put('pause/resume=%r\r\n' % asctime())
        self.makebuttonpause()
        self._device.resume()


parser = optparse.OptionParser()
parser.add_option('-s', '--server', dest='server', action='store',
                  help='cache server:port, default to localhost',
                  default='pandasrv')
opts, args = parser.parse_args()


SingleDeviceSession.run('pausebutton', PauseButton,
                        {'prefix': 'pause/', 'server': opts.server},
                        pidfile=False)
