[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
init-hook= "import PyQt4.QtGui"

# Profiled execution.
profile=no

# Add <file or directory> to the black list. It should be a base name, not a
# path. You may set this option multiple times.
ignore = .git
ignore = _pyctl.so,corbadevice_idl.py
ignore = _vendor

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# For some reason, Pylint cannot check members of these modules.
extension-pkg-whitelist = numpy,scipy,PyQt4.QtCore,PyQt4.QtGui,PyQt4.QtWebKit,PyQt4.QtDesigner,PyQt4.Qsci,PyQt4.Qwt5,nicospyctl.pyctl,nicoslivewidget


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable=access-member-before-definition
        ,no-member
        ,maybe-no-member
        ,unexpected-keyword-arg
        ,protected-access
        ,redefined-outer-name
        ,broad-except
        ,logging-not-lazy
        ,no-self-use
        ,duplicate-code
        ,bad-continuation
        ,unused-argument
        ,attribute-defined-outside-init
        ,missing-docstring,abstract-method
        ,no-init
        ,reimported
        ,duplicate-code
        ,multiple-statements
        ,eval-used
        ,interface-not-implemented
        ,too-many-lines
        ,invalid-name
        ,fixme
        ,locally-disabled
        ,file-ignored
        ,bad-open-mode
        ,superfluous-parens
        ,cell-var-from-loop
        ,cyclic-import
        ,bad-whitespace
        ,star-args
        ,global-statement

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
#output-format=parseable

msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=yes

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (R0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (R0004).
comment=no


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=device,
	setupname,
	Row,
	Column,
	BlockRow,
	Block,
	Field,
	vsplit,
	hsplit,
	window,
	panel,
	tool,
	docked,
	tabbed,
	setups


[BASIC]
# Required attributes for module, separated by a comma
required-attributes=

# List of builtins function names that should not be used, separated by a comma
bad-functions=input,filter

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,a,b,c,d,m,n,u,v,w,x,y,z,e,P,I,D,Q,E,B,A,T,Tc

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,baz,toto,tutu,tata

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Include a hint for the correct naming format with invalid-name
include-naming-hint=yes

# Regular expression matching correct function names
function-rgx=[A-Za-z_][A-Za-z0-9_]{1,30}$

# Naming hint for function names
function-name-hint=[a-z_][A-Za-z0-9_]{1,30}$

# Regular expression matching correct variable names
variable-rgx=[A-Za-z_][A-Za-z0-9_]{0,30}$

# Naming hint for variable names
variable-name-hint=[A-Za-z_][a-z0-9_]{0,30}$

# Regular expression matching correct constant names
const-rgx=(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$

# Naming hint for constant names
const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][A-Za-z0-9_]{0,30}$

# Naming hint for attribute names
attr-name-hint=[a-z_][A-Za-z0-9_]{0,30}$

# Regular expression matching correct argument names
argument-rgx=[a-z_][A-Za-z0-9_]{0,30}$

# Naming hint for argument names
argument-name-hint=[a-z_][A-Za-z0-9_]{0,30}$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{0,30}|(__.*__))$

# Naming hint for class attribute names
class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{0,30}|(__.*__))$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Naming hint for inline iteration names
inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct class names
class-rgx=([A-Za-z_])[a-zA-Z0-9_]+$

# Naming hint for class names
class-name-hint=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|(CARESS.*)|(_GlobalIDL.*))$

# note: the auto-generated CARESS/IDL names are excluded from the hint.
# Naming hint for module names
module-name-hint=[a-z_][a-z0-9_]*$

# Regular expression matching correct method names
method-rgx=[A-Za-z_][A-Za-z0-9_]{0,50}$

# Naming hint for method names
method-name-hint=[A-Za-z_][a-z0-9_]{0,50}$

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=132

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject,numpy,CommandLineCell

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members=REQUEST,acl_users,aq_parent


[DESIGN]

# Maximum number of arguments for function / method
max-args=15

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=50

# Maximum number of return / yield for function / method body
max-returns=40

# Maximum number of branch for function / method body
max-branches=70

# Maximum number of statements in function / method body
max-statements=150

# Maximum number of parents for a class (see R0901).
max-parents=20

# Maximum number of attributes for a class (see R0902).
max-attributes=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
max-public-methods=100


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp,doInit,preInit
