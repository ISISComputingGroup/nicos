Protokoll für Cascade-Server-Client-Kommunikation
-------------------------------------------------


Grundlegendes Layout:
	[LEN][Nachricht]


[LEN]:
	binärer, little-endian int, 4 Byte
	gibt Länge der folgenden Nachricht an,
	ohne den Int selber mitzurechnen

[Nachricht]:
	ASCII-Text der Länge [LEN] mit dem Format
	[Nachricht] = [Präfix][Kommando/Daten]



[Präfix]:
	an Server
	---------
	"CMD_" Kommando

	von Server
	----------
	"MSG_" Statusmeldung
	"DATA" TOF-Daten
	"IMAG" PAD-Daten
	"OKAY" kein Fehler
	"ERR_" Fehler, gefolgt von -meldung/-code
	


Kommandos
---------

	"CMD_start"
		Start der Messung

	"CMD_stop"
		Messung stoppen

	"CMD_startsim"
		Simulation starten

	"CMD_config_cdr"
		Hardware konfigurieren mit Parametern
		"time=10": Messzeit in sec
		"xres=128": x-Auflösung
		"yres=128": y-Auflösung
		"tres=128": # Zeitkanäle
		"mode=tof/image": Modus
		"comp=0/1": TOF-Dateien komprimieren
		
	"CMD_getconfig_cdr"
		aktuelle Konfiguration holen
	
	"CMD_readsram"
		TOF/PAD holen
	
	"CMD_close"
		Socket schließen


Beispiel
--------
[to server] length: 18, data: CMD_getconfig_cdr
[from server] length: 61, data: MSG_time=10.000000 
              mode=image xres=128 yres=128 tres=1 comp=0 

[to server] length: 66, data: CMD_config_cdr time=10.000000 
            xres=128 yres=128 tres=128 mode=tof
[from server] length: 4, data: OKAY

[to server] length: 10, data: CMD_start
[from server] length: 4, data: OKAY

[to server] length: 13, data: CMD_readsram
[from server] length: 8388612, data: DATA[...]
